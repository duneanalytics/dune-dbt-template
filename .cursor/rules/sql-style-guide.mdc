---
description: SQL style rules for dbt models
globs:
  - models/**/*.sql
  - macros/**/*.sql
  - tests/**/*.sql
alwaysApply: true
---

# SQL Style Rules

## Critical Rules (Never Break These)

### 1. Left Comma Club
- **NEVER use trailing commas**
- **ALWAYS use leading commas** with a comma and space before each column
- First column in select has no comma

```sql
-- ✅ CORRECT
select
	id
	, name
	, created_at
	, updated_at
from users

-- ❌ WRONG (trailing commas)
select
	id,
	name,
	created_at,
	updated_at
from users
```

### 2. Indentation: TABS ONLY
- **Use tabs for indentation, never spaces**
- One tab after SQL keywords

### 3. New Line After SQL Keywords
- After `select`, `from`, `join`, `where`, `group by`, `order by`, etc., always start a new line
- Then indent with one tab

```sql
-- ✅ CORRECT
select
	user_id
	, count(*) as transaction_count
from
	transactions
where
	status = 'completed'
group by
	user_id
order by
	transaction_count desc
```

### 4. Lowercase Everything
- All SQL keywords in lowercase: `select`, `from`, `where`, `join`, etc.
- All function names in lowercase: `count()`, `sum()`, `coalesce()`, etc.
- All column names in lowercase
- All table names in lowercase

```sql
-- ✅ CORRECT
select
	lower(email) as email
	, count(*) as total
from
	users
where
	status = 'active'

-- ❌ WRONG
SELECT
	LOWER(email) AS email
	, COUNT(*) as total
FROM
	users
WHERE
	status = 'active'
```

### 5. CTEs (Common Table Expressions)
- `with` and CTE name on the same line: `with base_data as (`
- Use leading commas between CTEs (comma before next CTE name, not after closing paren)
- SQL within CTE should be tabbed for readability

```sql
-- ✅ CORRECT
with base_data as (
	select
		id
		, name
	from
		users
)
, aggregated as (
	select
		id
		, count(*) as total
	from
		orders
	group by
		id
)

-- ❌ WRONG (trailing comma after CTE)
with base_data as (
	select
		id
		, name
	from
		users
),
aggregated as (
	select
		id
		, count(*) as total
	from
		orders
	group by
		id
)
```

### 6. Table Aliases
- **ALWAYS use `as` keyword before table aliases**
- Never omit `as` when aliasing tables
- **When joins are involved, ALWAYS prefix columns with table aliases**
- Use aliases in: select columns, join conditions, where clauses, group by, order by, functions - everywhere

```sql
-- ✅ CORRECT (aliases used everywhere)
select
	u.id
	, u.email
	, o.order_date
	, count(o.id) as order_count
	, sum(o.total) as total_amount
from
	users as u
left join orders as o
	on u.id = o.user_id
	and o.status = 'completed'
where
	u.created_at >= timestamp '2024-01-01'
	and o.order_date is not null
group by
	u.id
	, u.email
	, o.order_date
order by
	u.id

-- ❌ WRONG (missing `as` keyword)
select
	u.id
	, o.total
from
	users u
left join orders o
	on u.id = o.user_id

-- ❌ WRONG (columns not prefixed with aliases)
select
	id
	, email
	, order_date
from
	users as u
left join orders as o
	on u.id = o.user_id
```

### 7. Joins
- Don't tab before a join - keep it at same indentation level as `from`
- New line and tab after the join statement for the `on` clause

```sql
-- ✅ CORRECT
select
	u.id
	, u.name
	, o.total
from
	users as u
left join orders as o
	on u.id = o.user_id
where
	u.status = 'active'

-- ❌ WRONG (join is tabbed)
select
	u.id
	, u.name
	, o.total
from
	users as u
	left join orders as o
		on u.id = o.user_id
where
	u.status = 'active'
```

## Complete Example

```sql
with base_data as (
	select
		user_id
		, email
		, created_at
		, status
	from
		{{ source('raw', 'users') }}
	where
		deleted_at is null
)
, aggregated as (
	select
		user_id
		, count(*) as order_count
		, sum(amount) as total_amount
	from
		{{ ref('stg_orders') }}
	group by
		user_id
)

select
	b.user_id
	, b.email
	, b.created_at
	, b.status
	, coalesce(a.order_count, 0) as order_count
	, coalesce(a.total_amount, 0) as total_amount
from
	base_data as b
left join aggregated as a
	on b.user_id = a.user_id
where
	b.status = 'active'
order by
	b.created_at desc
```
